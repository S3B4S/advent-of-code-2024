import { expect } from "jsr:@std/expect";
import { solvePart1, solvePart2 } from "./index.ts";
import { testWrapper } from "../utils/misc.ts";

let fileInput: string;
try {
  fileInput = Deno.readTextFileSync("./08_resonant-collinearity/input.txt");
} catch {
  // In GitHub Actions the `Deno.readTextFileSync` will fail, as the `input.txt` is not committed to git.
  // So we assign an empty string, knowing that in GitHub Actions the fileInput won't be used anyway.
  fileInput = "";
}

const exampleInput = `
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
`.trim();

testWrapper("Day 08", () => {
  Deno.test("Part 1 - Example input", () => {
    expect(solvePart1(exampleInput)).toEqual(14);
  });

  Deno.test("Part 1 - Example input - 2", () => {
    expect(
      solvePart1(`
..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........
      `)
    ).toEqual(2);
  });

  Deno.test("Part 1 - Example input - isolate case", () => {
    expect(
      solvePart1(`
............
........0...
.....0......
............
............
............
............
............
............
............
............
............
      `)
    ).toEqual(2);
  });

  Deno.test("Part 1 - Example input - isolate case 2", () => {
    expect(
      solvePart1(`
............
...........
.....0......
............
....0.......
............
............
............
............
............
............
............
      `)
    ).toEqual(2);
  });

  Deno.test("Part 1 - File input", () => {
    expect(solvePart1(fileInput)).toEqual(0);
  });

  Deno.test.ignore("Part 2 - Example input", () => {
    expect(solvePart2(exampleInput)).toEqual(0);
  });

  Deno.test.ignore("Part 2 - File input", () => {
    expect(solvePart2(fileInput)).toEqual(0);
  });
});
